/*
 * Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */

@import "../../../mixins/_disabled.css";
@import "../../../mixins/_rounded.css";
@import "../../../mixins/_shadow.css";

:root {
	--ck-todo-list-checkmark-size: 16px;
	--ck-color-todo-list-checkmark-background: hsl(126, 64%, 41%);
	--ck-color-todo-list-checkmark-shadow: hsla(0, 0%, 0%, 0.1);
}

.ck.ck-list {
	@mixin ck-rounded-corners;

	list-style-type: none;
	background: var(--ck-color-list-background);
}

.ck.ck-list__item {
	cursor: default;
	min-width: 12em;

	& .ck-button {
		min-height: unset;
		width: 100%;
		text-align: left;
		border-radius: 0;
		border: 0;

		/* List items should have the same height. Use absolute units to make sure it is so
		   because e.g. different heading styles may have different height
		   https://github.com/ckeditor/ckeditor5-heading/issues/63 */
		padding:
			calc(.2*var(--ck-line-height-base)*var(--ck-font-size-base))
			calc(.4*var(--ck-line-height-base)*var(--ck-font-size-base));

		& .ck-button__label {
			/* https://github.com/ckeditor/ckeditor5-heading/issues/63 */
			line-height: calc(1.2*var(--ck-line-height-base)*var(--ck-font-size-base));
		}

		&:active {
			box-shadow: none;
		}

		&.ck-on {
			background: var(--ck-color-list-button-on-background);
			color: var(--ck-color-list-button-on-text);

			&:hover:not(ck-disabled) {
				background: var(--ck-color-list-button-on-background-focus);
			}

			&:active {
				box-shadow: none;
			}
		}

		&:hover:not(.ck-disabled) {
			background: var(--ck-color-list-button-hover-background);
		}
	}

	/* It's unnecessary to change the background/text of a switch toggle; it has different ways
	of conveying its state (like the switcher) */
	& .ck-switchbutton {
		&.ck-on {
			background: var(--ck-color-list-background);
			color: inherit;

			&:hover:not(ck-disabled) {
				background: var(--ck-color-list-button-hover-background);
				color: inherit;
			}
		}
	}
}

.ck.ck-list__separator {
	height: 1px;
	width: 100%;
	background: var(--ck-color-base-border);
}

.ck .todo-list {
	list-style: none;

	& li {
		margin-bottom: 5px;

		& .todo-list {
			margin-top: 5px;
		}
	}
}

/*
 * Let's hide the native checkbox and make a fancy one.
 *
 * Note: Checkbox element cannot be hidden using `display: none` or `visibility: hidden`.
 * It has to be clickable to not steal the focus after clicking on it.
 */
.ck .todo-list__checkmark {
	cursor: pointer;
	width: var(--ck-todo-list-checkmark-size);
	height: var(--ck-todo-list-checkmark-size);
	vertical-align: middle;
	left: calc( var(--ck-spacing-large) * -1.5 );
	margin-right: calc( var(--ck-spacing-large) * -1 );

	&::before {
		content: '';
		width: 100%;
		height: 100%;
		border: 1px solid var(--ck-color-base-text);
		border-radius: var(--ck-border-radius);
		transition: 250ms ease-in-out box-shadow, 250ms ease-in-out background, 250ms ease-in-out border;
	}

	&::after {
		content: '';

		/* Calculate tick position, size and border-width proportional to the checkmark size. */
		left: calc( var(--ck-todo-list-checkmark-size) / 3 );
		top: calc( var(--ck-todo-list-checkmark-size) / 5.3 );
		width: calc( var(--ck-todo-list-checkmark-size) / 5.3 );
		height: calc( var(--ck-todo-list-checkmark-size) / 2.6 );
		border-style: solid;
		border-color: transparent;
		border-width: 0 calc( var(--ck-todo-list-checkmark-size) / 8 ) calc( var(--ck-todo-list-checkmark-size) / 8 ) 0;
		transform: rotate(45deg);
	}

	&:hover {
		&::before {
			box-shadow: 0 0 0 5px var(--ck-color-todo-list-checkmark-shadow);
		}
	}

	& input[type='checkbox'] {
		width: 100%;
		height: 100%;
		opacity: 0;
		margin: 0;
	}
}

.ck .todo-list__checkmark_checked {
	&::before {
		background: var(--ck-color-todo-list-checkmark-background);
		border-color: var(--ck-color-todo-list-checkmark-background);
	}

	&::after {
		border-color: var(--ck-color-base-background);
	}
}
